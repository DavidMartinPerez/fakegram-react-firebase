{"version":3,"sources":["FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["FileUpload","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","uploadValue","react_default","a","createElement","value","props","max","className","type","onChange","onUpload","Component","App","user","pictures","handleAuth","bind","assertThisInitialized","handleLogout","handleUpload","_this2","firebase","auth","onAuthStateChanged","setState","database","ref","on","snapshot","concat","val","provider","GoogleAuthProvider","signInWithPopup","then","result","console","log","email","catch","err","signOut","e","_this3","file","target","files","storageRef","storage","name","child","put","percentage","bytesTransferred","totalBytes","error","getDownloadURL","url","record","photoURL","displayName","image","push","set","src","width","alt","onClick","src_FileUpload","map","picture","reverse","renderLoginButton","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bdb4ea9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass FileUpload extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            uploadValue: 0\r\n        };\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <progress value={ this.props.uploadValue } max=\"100\">\r\n                    { this.props.uploadValue }\r\n                </progress>\r\n                <br />\r\n                <input className=\"fileUpload\" type=\"file\" onChange={ this.props.onUpload } />\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default FileUpload;","import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport './App.css';\r\nimport FileUpload from './FileUpload';\r\n\r\nclass App extends Component {\r\n    constructor (){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            pictures: [],\r\n            uploadValue: 0\r\n        };\r\n\r\n        this.handleAuth = this.handleAuth.bind(this);\r\n        this.handleLogout = this.handleLogout.bind(this)\r\n        this.handleUpload = this.handleUpload.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        firebase.auth().onAuthStateChanged(user => {\r\n            this.setState({ user })\r\n        });\r\n\r\n        firebase.database().ref('pictures').on('child_added', snapshot => {\r\n            this.setState({\r\n                pictures: this.state.pictures.concat(snapshot.val())\r\n            });\r\n        })\r\n    }\r\n\r\n    //SignIn\r\n    handleAuth () {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        firebase.auth().signInWithPopup(provider)\r\n            .then( result => { console.log(`${result.user.email} ha iniciado sesión`) })\r\n            .catch( err => console.log(err) )\r\n    }\r\n    //deslogeare\r\n    handleLogout() {\r\n        firebase.auth().signOut()\r\n            .then( result => { console.log(`${result.user.email} ha cerrado sesión`) })\r\n            .catch( err => console.log(err) )\r\n    }\r\n    //Subir fichero\r\n    handleUpload (e) {\r\n        const file = e.target.files[0];\r\n        const storageRef = firebase.storage().ref( `/photo/${file.name}` );\r\n        var task = storageRef.child(`${file.name}`).put(file);\r\n\r\n        task.on( 'state_changed', ( snapshot ) => {\r\n            let percentage = ( snapshot.bytesTransferred / snapshot.totalBytes ) * 100;\r\n            this.setState({\r\n                uploadValue: percentage\r\n            });\r\n        }, ( error ) => {\r\n            console.log(error);\r\n        }, () => {\r\n            storageRef.child(file.name).getDownloadURL().then((url) => {\r\n                const record = {\r\n                    photoURL: this.state.user.photoURL,\r\n                    displayName: this.state.user.displayName,\r\n                    image: url\r\n                }\r\n                const dbRef = firebase.database().ref('pictures');\r\n                const newPicture = dbRef.push();\r\n                newPicture.set(record)\r\n            });\r\n        });\r\n    }\r\n    //Render boton\r\n    renderLoginButton () {\r\n        //Logeado\r\n        if(this.state.user){\r\n            return (\r\n                <div>\r\n                    <img src={this.state.user.photoURL} width=\"350\" alt={this.state.user.displayName} />\r\n                    <p>Hola {this.state.user.displayName}</p>\r\n                    <button onClick={this.handleLogout}> Salir</button>\r\n                    <FileUpload onUpload={this.handleUpload} />\r\n\r\n                    {\r\n                        this.state.pictures.map( picture  => (\r\n                            <div className=\"subida\">\r\n                                <div className=\"subida__user\">\r\n                                    <img className=\"subida__fotoUsuario\" src={picture.photoURL} alt={picture.displayName} />\r\n                                    <span className=\"subida__nombreUsuario\">{picture.displayName}</span>\r\n                                </div>\r\n                                <img className=\"subida__fotoSubida\" src={picture.image} alt=\"\"/>\r\n                            </div>\r\n                        )).reverse()\r\n                    }\r\n                </div>\r\n            )\r\n        } else{\r\n            return ( <button onClick={this.handleAuth}> Login con google </button> )\r\n        }\r\n        // No logeado\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"\">\r\n                    <h2>FakeGram</h2>\r\n                </header>\r\n                <div className=\"App-intro\">\r\n                    { this.renderLoginButton() }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport firebase from 'firebase';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nfirebase.initializeApp({\r\n    apiKey: \"AIzaSyA_cD99g2wypo3Jxb5jnQJs9gP5PxM4yog\",\r\n    authDomain: \"fakegram-3cfc2.firebaseapp.com\",\r\n    databaseURL: \"https://fakegram-3cfc2.firebaseio.com\",\r\n    projectId: \"fakegram-3cfc2\",\r\n    storageBucket: \"fakegram-3cfc2.appspot.com\",\r\n    messagingSenderId: \"936070948045\"\r\n});\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}